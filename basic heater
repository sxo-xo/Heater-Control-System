#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <stdio.h>

#define DHT_PIN 18
#define DHT_TYPE DHT22
#define RELAY_PIN 26
#define HEAT_LED_PIN 13
#define IDLE_LED_PIN 25
#define BUZZER_PIN 27

const int BAR_PINS[10] = {23, 19, 17, 16, 15, 14, 12, 5, 4, 2};

const float MIN_TEMP = 20.0;
const float TARGET_TEMP = 28.0;
const float OVERHEAT_TEMP = 45.0;
const float MIN_DISPLAY_TEMP = -40.0;

DHT dht(DHT_PIN, DHT_TYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setIndicators(bool heaterOn, bool heatLed, bool idleLed, bool buzzerOn) {
  digitalWrite(RELAY_PIN, heaterOn ? LOW : HIGH);
  digitalWrite(HEAT_LED_PIN, heatLed);
  digitalWrite(IDLE_LED_PIN, idleLed);
  if (buzzerOn) tone(BUZZER_PIN, 500);
  else noTone(BUZZER_PIN);
}

int heaterControlBar(float currentTemp) {
  int segments = map(currentTemp, (int)MIN_DISPLAY_TEMP, (int)TARGET_TEMP, 10, 0);
  segments = constrain(segments, 0, 10);
  for (int i = 0; i < 10; i++) {
    digitalWrite(BAR_PINS[i], i < segments ? HIGH : LOW);
  }
  return segments;
}

void setup() {
  Serial.begin(115200);
  delay(300);
  Serial.println("Heater Control Starting...");

  dht.begin();
  Wire.begin(21, 22);
  lcd.init();
  lcd.backlight();

  pinMode(RELAY_PIN, OUTPUT);
  pinMode(HEAT_LED_PIN, OUTPUT);
  pinMode(IDLE_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);
  digitalWrite(HEAT_LED_PIN, LOW);
  digitalWrite(IDLE_LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  for (int i = 0; i < 10; i++) {
    pinMode(BAR_PINS[i], OUTPUT);
    digitalWrite(BAR_PINS[i], LOW);
  }
}

void loop() {
  float temp = dht.readTemperature();
  String state;

  if (isnan(temp)) {
    delay(500);
    return;
  }

  if (temp >= OVERHEAT_TEMP) {
    setIndicators(false, true, false, true);
    state = "OVERHEAT";
  } else if (temp < MIN_TEMP) {
    setIndicators(true, false, false, false);
    state = "HEATING";
  } else if (abs(temp - TARGET_TEMP) < 0.1) {
    setIndicators(false, false, true, false);
    state = "TARGET_OK";
  } else if (temp < TARGET_TEMP) {
    setIndicators(true, false, true, false);
    state = "STABILIZING";
  } else {
    setIndicators(false, false, true, false);
    state = "IDLE";
  }

  int segments = heaterControlBar(temp);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Temp:"); lcd.print(temp, 1); lcd.print("C");
  lcd.setCursor(0, 1);
  lcd.print("State:"); lcd.print(state);

  Serial.print("Temp="); Serial.print(temp, 1);
  Serial.print("C, Status="); Serial.print(state);
  if (temp < TARGET_TEMP) {
    Serial.print(", Level="); Serial.println(segments);
  } else {
    Serial.println(", Heater OFF");
  }

  delay(500);
}
