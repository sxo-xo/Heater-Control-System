#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#define DHT_PIN         18
#define DHT_TYPE        DHT22
#define RELAY_PIN       26
#define HEAT_LED_PIN    13
#define IDLE_LED_PIN    25
#define HEATING_LED_PIN 33
#define BUZZER_PIN      27

const int BAR_PINS[10] = {23, 19, 17, 16, 15, 14, 12, 5, 4, 2};

const float MIN_TEMP         = 20.0;
const float TARGET_TEMP      = 28.0;
const float OVERHEAT_TEMP    = 45.0;
const float MIN_DISPLAY_TEMP = -40.0;

DHT dht(DHT_PIN, DHT_TYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);

static float currentTemp = 0;
static String currentState = "";

void setIndicators(bool heaterOn, bool heatLed, bool idleLed, bool buzzerOn) {
  digitalWrite(RELAY_PIN,      heaterOn        ? LOW  : HIGH);
  digitalWrite(HEAT_LED_PIN,   heatLed);
  digitalWrite(IDLE_LED_PIN,   idleLed);
  digitalWrite(HEATING_LED_PIN,heaterOn);
  if (buzzerOn) tone(BUZZER_PIN, 500);
  else noTone(BUZZER_PIN);
}

int heaterControlBar(float temp) {
  int segments = map(temp, (int)MIN_DISPLAY_TEMP, (int)TARGET_TEMP, 10, 0);
  segments = constrain(segments, 0, 10);
  for (int i = 0; i < 10; i++) {
    digitalWrite(BAR_PINS[i], i < segments ? HIGH : LOW);
  }
  return segments;
}

void tempTask(void *pvParameters) {
  for (;;) {
    float t = dht.readTemperature();
    if (!isnan(t)) currentTemp = t;
    vTaskDelay(pdMS_TO_TICKS(1000));
  }
}

void controlTask(void *pvParameters) {
  float lastTemp = -999;
  String lastState = "";
  for (;;) {
    if (currentTemp >= OVERHEAT_TEMP)      { setIndicators(false, true,  false, true);  currentState = "OVERHEAT";   }
    else if (currentTemp <  MIN_TEMP)       { setIndicators(true,  false, false, false); currentState = "HEATING";    }
    else if (fabs(currentTemp - TARGET_TEMP) < 0.1) { setIndicators(false, false, true,  false); currentState = "TARGET_OK"; }
    else if (currentTemp <  TARGET_TEMP)    { setIndicators(true,  false, true,  false); currentState = "STABILIZING"; }
    else                                     { setIndicators(false, false, true,  false); currentState = "IDLE";       }

    int seg = heaterControlBar(currentTemp);
    if (fabs(currentTemp - lastTemp) > 0.1 || currentState != lastState) {
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Temp:"); lcd.print(currentTemp,1); lcd.print("C");
      lcd.setCursor(0,1);
      lcd.print("State:"); lcd.print(currentState);
      lastTemp = currentTemp;
      lastState = currentState;
    }
    vTaskDelay(pdMS_TO_TICKS(200));
  }
}

void bleTask(void *pvParameters) {
  for (;;) {
    Serial.print("MOCK BLE -> Temp="); Serial.print(currentTemp,1);
    Serial.print("C, State="); Serial.println(currentState);
    vTaskDelay(pdMS_TO_TICKS(3000));
  }
}

void setup() {
  Serial.begin(115200);
  delay(300);
  dht.begin();
  Wire.begin(21,22);
  lcd.init(); lcd.backlight();

  lcd.clear();
  lcd.setCursor(3,0);
  lcd.print("Welcome");
  lcd.setCursor(2,1);
  lcd.print("Starting...");
  delay(5000);
  lcd.clear();

  pinMode(RELAY_PIN,      OUTPUT);
  pinMode(HEAT_LED_PIN,   OUTPUT);
  pinMode(IDLE_LED_PIN,   OUTPUT);
  pinMode(HEATING_LED_PIN,OUTPUT);
  pinMode(BUZZER_PIN,     OUTPUT);
  digitalWrite(RELAY_PIN,      HIGH);
  digitalWrite(HEAT_LED_PIN,   LOW);
  digitalWrite(IDLE_LED_PIN,   LOW);
  digitalWrite(HEATING_LED_PIN,LOW);
  digitalWrite(BUZZER_PIN,     LOW);

  for (int i = 0; i < 10; i++) {
    pinMode(BAR_PINS[i], OUTPUT);
    digitalWrite(BAR_PINS[i], LOW);
  }

  xTaskCreate(tempTask,    "TempTask",    2048, NULL, 2, NULL);
  xTaskCreate(controlTask, "ControlTask", 4096, NULL, 2, NULL);
  xTaskCreate(bleTask,     "BLETask",    2048, NULL, 1, NULL);
}

void loop() {
  vTaskDelay(pdMS_TO_TICKS(100));
}
